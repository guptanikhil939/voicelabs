<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.voicelabs</groupId>
	<artifactId>handler</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>handler</name>
	<description>Handler service for Voicelabs Alexa skill</description>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.10.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<properties>
<!-- 		<docker.image.repository>papajohns/${project.artifactId}</docker.image.repository>
 -->		<docker.image.tag>latest</docker.image.tag>	
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	    <project.http.version>1.23.0</project.http.version>	    
	    
	    <sonar.sources>src/main</sonar.sources>
		<sonar.tests>src/test</sonar.tests>
		<!-- Below property indicates the pattern of the test class -->
		<runSuite>**/*Test.class</runSuite>
		<!-- Sonar-JaCoCo properties -->
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
		<sonar.jacoco.reportPath>${project.basedir}/../target/jacoco.exec</sonar.jacoco.reportPath>
		<sonar.language>java</sonar.language>
	    <sonar.coverage.exclusions>
	          **/model/**,
	          **/configuration/**,
	          src/main/java/com/pji/alexa/util/Constants.java
	    </sonar.coverage.exclusions>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
		      	<exclusion>
		      		<groupId>ch.qos.logback</groupId>
		      		<artifactId>logback-classic</artifactId>	      	
		      	</exclusion>
	      	</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>		
		</dependency>	
		<!-- JSTL -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		
		<dependency>
	       <groupId>javax.servlet</groupId>
	       <artifactId>javax.servlet-api</artifactId>
	       <scope>provided</scope>
		</dependency>
			<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>				

		<!-- Optional, for bootstrap -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>3.3.7</version>
		</dependency>
      	<dependency>
	         <groupId>org.springframework.cloud</groupId>
	         <artifactId>spring-cloud-starter-sleuth</artifactId>
	         <version>1.3.3.RELEASE</version>
      	</dependency>
	   <dependency>
	      <groupId>com.amazon.alexa</groupId>
	      <artifactId>alexa-skills-kit</artifactId>
	      <version>1.8.1</version>
			<exclusions>
	      	<exclusion>
	      		<groupId>org.slf4j</groupId>
	      		<artifactId>slf4j-api</artifactId>	      	
	      	</exclusion>
	      	<exclusion>
	      		<groupId>org.slf4j</groupId>
	      		<artifactId>slf4j-log4j12</artifactId>	      	
	      	</exclusion>	      	
	      	<exclusion>
	      		<groupId>log4j</groupId>
	      		<artifactId>log4j</artifactId>	      	
	      	</exclusion>
	      </exclusions>
	    </dependency>
	    <dependency>
	      <groupId>org.apache.commons</groupId>
	      <artifactId>commons-lang3</artifactId>
	      <version>3.4</version>
	      <scope>compile</scope>
	    </dependency>
	    <dependency>
	      <groupId>org.apache.directory.studio</groupId>
	      <artifactId>org.apache.commons.io</artifactId>
	      <version>2.4</version>
	      <scope>compile</scope>
	    </dependency>    	
		<dependency>
		  <groupId>com.google.cloud</groupId>
		  <artifactId>google-cloud-storage</artifactId>
		  <version>1.17.0</version>
		</dependency>   
 		<dependency>
		  <groupId>com.google.cloud</groupId>
		  <artifactId>google-cloud-logging-logback</artifactId>
    		<version>0.37.0-alpha</version>   		
		</dependency>				
		<dependency>
		  <groupId>org.json</groupId>
		  <artifactId>json</artifactId>
		  </dependency>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
			<version>2.11.0</version>
		</dependency>
		<dependency>
    		<groupId>io.jsonwebtoken</groupId>
    		<artifactId>jjwt</artifactId>
   			 <version>0.7.0</version>
		</dependency>
		<!-- Jar for converting ordinals -->
		<dependency>
			<groupId>com.ibm.icu</groupId>
			<artifactId>icu4j</artifactId>
			<version>54.1</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.retry</groupId>
			<artifactId>spring-retry</artifactId>
		</dependency>
		<dependency>
		    <groupId>org.powermock</groupId>
		    <artifactId>powermock-module-junit4</artifactId>
		    <version>1.7.3</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.powermock/powermock-api-mockito -->
		<dependency>
		    <groupId>org.powermock</groupId>
		    <artifactId>powermock-api-mockito</artifactId>
		    <version>1.7.4</version>
		</dependency>
		<dependency>
             <groupId>com.google.code.simple-spring-memcached</groupId>
             <artifactId>xmemcached-provider</artifactId>
             <version>4.0.0</version>
        </dependency>
        <dependency>
             <groupId>com.googlecode.xmemcached</groupId>
             <artifactId>xmemcached</artifactId>
             <version>2.4.3</version>
        </dependency>
        <dependency>
		   <groupId>com.google.code.simple-spring-memcached</groupId>
		   <artifactId>spring-cache</artifactId>
		   <version>3.0.2</version>
		</dependency>
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-devtools</artifactId>
		</dependency>		
	</dependencies>
	<build>
	    <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- This plugin is used to build Docker container images -->
			<plugin>
					<groupId>com.spotify</groupId>
					<artifactId>dockerfile-maven-plugin</artifactId>
					<version>1.4.0</version>
					<configuration>
							<repository>${docker.image.repository}</repository>
							<tag>${docker.image.tag}</tag>

							<!--
									Build args passed to Docker when it builds container
									images.  For more information, see
									https://docs.docker.com/engine/reference/commandline/build
							-->
							<buildArgs>
									<JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
							</buildArgs>
					</configuration>
			</plugin>			
 			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.7.201606060606</version>
				<configuration>
				<excludes>
					<exclude>**/configuration/**</exclude>
				    <exclude>**/model/**</exclude>				
				</excludes>
				</configuration>				
				<executions>
					<execution>
					<goals>
						<goal>prepare-agent</goal>
					</goals>
					</execution>
					<execution>
					<id>report</id>
						<phase>prepare-package</phase>
					<goals>
						<goal>report</goal>
					</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>